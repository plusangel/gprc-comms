// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: platformCommunications.proto

#include "platformCommunications.pb.h"
#include "platformCommunications.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace platformcomms {

static const char* PlatformCommunications_method_names[] = {
  "/platformcomms.PlatformCommunications/Initialize",
  "/platformcomms.PlatformCommunications/GoToTarget",
  "/platformcomms.PlatformCommunications/GoToHeight",
  "/platformcomms.PlatformCommunications/Stabilize",
  "/platformcomms.PlatformCommunications/MakeSafe",
  "/platformcomms.PlatformCommunications/GetState",
};

std::unique_ptr< PlatformCommunications::Stub> PlatformCommunications::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlatformCommunications::Stub> stub(new PlatformCommunications::Stub(channel));
  return stub;
}

PlatformCommunications::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Initialize_(PlatformCommunications_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GoToTarget_(PlatformCommunications_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GoToHeight_(PlatformCommunications_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stabilize_(PlatformCommunications_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeSafe_(PlatformCommunications_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(PlatformCommunications_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlatformCommunications::Stub::Initialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::platformcomms::PlatformState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void PlatformCommunications::Stub::experimental_async::Initialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

void PlatformCommunications::Stub::experimental_async::Initialize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, request, false);
}

::grpc::ClientReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::GoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), rpcmethod_GoToTarget_, context, request);
}

void PlatformCommunications::Stub::experimental_async::GoToTarget(::grpc::ClientContext* context, ::platformcomms::TargetRequest* request, ::grpc::experimental::ClientReadReactor< ::platformcomms::PlatformState>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::platformcomms::PlatformState>::Create(stub_->channel_.get(), stub_->rpcmethod_GoToTarget_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::AsyncGoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_GoToTarget_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::PrepareAsyncGoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_GoToTarget_, context, request, false, nullptr);
}

::grpc::Status PlatformCommunications::Stub::GoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::platformcomms::PlatformState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GoToHeight_, context, request, response);
}

void PlatformCommunications::Stub::experimental_async::GoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GoToHeight_, context, request, response, std::move(f));
}

void PlatformCommunications::Stub::experimental_async::GoToHeight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GoToHeight_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::AsyncGoToHeightRaw(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_GoToHeight_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::PrepareAsyncGoToHeightRaw(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_GoToHeight_, context, request, false);
}

::grpc::Status PlatformCommunications::Stub::Stabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::platformcomms::PlatformState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stabilize_, context, request, response);
}

void PlatformCommunications::Stub::experimental_async::Stabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stabilize_, context, request, response, std::move(f));
}

void PlatformCommunications::Stub::experimental_async::Stabilize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stabilize_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::AsyncStabilizeRaw(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_Stabilize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::PrepareAsyncStabilizeRaw(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_Stabilize_, context, request, false);
}

::grpc::Status PlatformCommunications::Stub::MakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::platformcomms::PlatformState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MakeSafe_, context, request, response);
}

void PlatformCommunications::Stub::experimental_async::MakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MakeSafe_, context, request, response, std::move(f));
}

void PlatformCommunications::Stub::experimental_async::MakeSafe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MakeSafe_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::AsyncMakeSafeRaw(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_MakeSafe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::PrepareAsyncMakeSafeRaw(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_MakeSafe_, context, request, false);
}

::grpc::Status PlatformCommunications::Stub::GetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::platformcomms::PlatformState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetState_, context, request, response);
}

void PlatformCommunications::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

void PlatformCommunications::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PlatformCommunications::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::platformcomms::PlatformState>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, false);
}

PlatformCommunications::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlatformCommunications_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlatformCommunications::Service, ::platformcomms::InitializationRequest, ::platformcomms::PlatformState>(
          std::mem_fn(&PlatformCommunications::Service::Initialize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlatformCommunications_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PlatformCommunications::Service, ::platformcomms::TargetRequest, ::platformcomms::PlatformState>(
          std::mem_fn(&PlatformCommunications::Service::GoToTarget), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlatformCommunications_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlatformCommunications::Service, ::platformcomms::HeightRequest, ::platformcomms::PlatformState>(
          std::mem_fn(&PlatformCommunications::Service::GoToHeight), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlatformCommunications_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlatformCommunications::Service, ::platformcomms::StabilityRequest, ::platformcomms::PlatformState>(
          std::mem_fn(&PlatformCommunications::Service::Stabilize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlatformCommunications_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlatformCommunications::Service, ::platformcomms::MakeSafeRequest, ::platformcomms::PlatformState>(
          std::mem_fn(&PlatformCommunications::Service::MakeSafe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlatformCommunications_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlatformCommunications::Service, ::platformcomms::StateRequest, ::platformcomms::PlatformState>(
          std::mem_fn(&PlatformCommunications::Service::GetState), this)));
}

PlatformCommunications::Service::~Service() {
}

::grpc::Status PlatformCommunications::Service::Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlatformCommunications::Service::GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlatformCommunications::Service::GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlatformCommunications::Service::Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlatformCommunications::Service::MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlatformCommunications::Service::GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace platformcomms

