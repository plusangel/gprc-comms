// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: platformCommunications.proto
#ifndef GRPC_platformCommunications_2eproto__INCLUDED
#define GRPC_platformCommunications_2eproto__INCLUDED

#include "platformCommunications.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace platformcomms {

// Service for communications on the platfrom
class PlatformCommunications final {
 public:
  static constexpr char const* service_full_name() {
    return "platformcomms.PlatformCommunications";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialises the mobile platform's state
    virtual ::grpc::Status Initialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::platformcomms::PlatformState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> AsyncInitialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    // Sends the platform to a given location and opens a stream for return notifications
    // TODO: Continuous response notifications should probably be moved to a separate channel
    std::unique_ptr< ::grpc::ClientReaderInterface< ::platformcomms::PlatformState>> GoToTarget(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::platformcomms::PlatformState>>(GoToTargetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::platformcomms::PlatformState>> AsyncGoToTarget(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::platformcomms::PlatformState>>(AsyncGoToTargetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::platformcomms::PlatformState>> PrepareAsyncGoToTarget(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::platformcomms::PlatformState>>(PrepareAsyncGoToTargetRaw(context, request, cq));
    }
    // Sends the platform to a given height
    virtual ::grpc::Status GoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::platformcomms::PlatformState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> AsyncGoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(AsyncGoToHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> PrepareAsyncGoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(PrepareAsyncGoToHeightRaw(context, request, cq));
    }
    // Ensures the platform is stable
    virtual ::grpc::Status Stabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::platformcomms::PlatformState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> AsyncStabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(AsyncStabilizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> PrepareAsyncStabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(PrepareAsyncStabilizeRaw(context, request, cq));
    }
    // Make the platform safe
    virtual ::grpc::Status MakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::platformcomms::PlatformState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> AsyncMakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(AsyncMakeSafeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> PrepareAsyncMakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(PrepareAsyncMakeSafeRaw(context, request, cq));
    }
    // Get the current state of the platform
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::platformcomms::PlatformState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> AsyncGetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Initialises the mobile platform's state
      virtual void Initialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Initialize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      // Sends the platform to a given location and opens a stream for return notifications
      // TODO: Continuous response notifications should probably be moved to a separate channel
      virtual void GoToTarget(::grpc::ClientContext* context, ::platformcomms::TargetRequest* request, ::grpc::experimental::ClientReadReactor< ::platformcomms::PlatformState>* reactor) = 0;
      // Sends the platform to a given height
      virtual void GoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GoToHeight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      // Ensures the platform is stable
      virtual void Stabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stabilize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      // Make the platform safe
      virtual void MakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MakeSafe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      // Get the current state of the platform
      virtual void GetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::platformcomms::PlatformState>* GoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::platformcomms::PlatformState>* AsyncGoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::platformcomms::PlatformState>* PrepareAsyncGoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* AsyncGoToHeightRaw(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* PrepareAsyncGoToHeightRaw(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* AsyncStabilizeRaw(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* PrepareAsyncStabilizeRaw(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* AsyncMakeSafeRaw(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* PrepareAsyncMakeSafeRaw(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::platformcomms::PlatformState>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Initialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::platformcomms::PlatformState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> AsyncInitialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::platformcomms::PlatformState>> GoToTarget(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::platformcomms::PlatformState>>(GoToTargetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::platformcomms::PlatformState>> AsyncGoToTarget(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::platformcomms::PlatformState>>(AsyncGoToTargetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::platformcomms::PlatformState>> PrepareAsyncGoToTarget(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::platformcomms::PlatformState>>(PrepareAsyncGoToTargetRaw(context, request, cq));
    }
    ::grpc::Status GoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::platformcomms::PlatformState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> AsyncGoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(AsyncGoToHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> PrepareAsyncGoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(PrepareAsyncGoToHeightRaw(context, request, cq));
    }
    ::grpc::Status Stabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::platformcomms::PlatformState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> AsyncStabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(AsyncStabilizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> PrepareAsyncStabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(PrepareAsyncStabilizeRaw(context, request, cq));
    }
    ::grpc::Status MakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::platformcomms::PlatformState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> AsyncMakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(AsyncMakeSafeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> PrepareAsyncMakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(PrepareAsyncMakeSafeRaw(context, request, cq));
    }
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::platformcomms::PlatformState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> AsyncGetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Initialize(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void Initialize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void GoToTarget(::grpc::ClientContext* context, ::platformcomms::TargetRequest* request, ::grpc::experimental::ClientReadReactor< ::platformcomms::PlatformState>* reactor) override;
      void GoToHeight(::grpc::ClientContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void GoToHeight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void Stabilize(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void Stabilize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void MakeSafe(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void MakeSafe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void GetState(::grpc::ClientContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
      void GetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::platformcomms::PlatformState* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::platformcomms::InitializationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::platformcomms::PlatformState>* GoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request) override;
    ::grpc::ClientAsyncReader< ::platformcomms::PlatformState>* AsyncGoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::platformcomms::PlatformState>* PrepareAsyncGoToTargetRaw(::grpc::ClientContext* context, const ::platformcomms::TargetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* AsyncGoToHeightRaw(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PrepareAsyncGoToHeightRaw(::grpc::ClientContext* context, const ::platformcomms::HeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* AsyncStabilizeRaw(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PrepareAsyncStabilizeRaw(::grpc::ClientContext* context, const ::platformcomms::StabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* AsyncMakeSafeRaw(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PrepareAsyncMakeSafeRaw(::grpc::ClientContext* context, const ::platformcomms::MakeSafeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::platformcomms::PlatformState>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::platformcomms::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_GoToTarget_;
    const ::grpc::internal::RpcMethod rpcmethod_GoToHeight_;
    const ::grpc::internal::RpcMethod rpcmethod_Stabilize_;
    const ::grpc::internal::RpcMethod rpcmethod_MakeSafe_;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialises the mobile platform's state
    virtual ::grpc::Status Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response);
    // Sends the platform to a given location and opens a stream for return notifications
    // TODO: Continuous response notifications should probably be moved to a separate channel
    virtual ::grpc::Status GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer);
    // Sends the platform to a given height
    virtual ::grpc::Status GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response);
    // Ensures the platform is stable
    virtual ::grpc::Status Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response);
    // Make the platform safe
    virtual ::grpc::Status MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response);
    // Get the current state of the platform
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Initialize() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::platformcomms::InitializationRequest* request, ::grpc::ServerAsyncResponseWriter< ::platformcomms::PlatformState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GoToTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GoToTarget() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GoToTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoToTarget(::grpc::ServerContext* context, ::platformcomms::TargetRequest* request, ::grpc::ServerAsyncWriter< ::platformcomms::PlatformState>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GoToHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GoToHeight() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GoToHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoToHeight(::grpc::ServerContext* context, ::platformcomms::HeightRequest* request, ::grpc::ServerAsyncResponseWriter< ::platformcomms::PlatformState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stabilize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stabilize() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Stabilize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStabilize(::grpc::ServerContext* context, ::platformcomms::StabilityRequest* request, ::grpc::ServerAsyncResponseWriter< ::platformcomms::PlatformState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeSafe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MakeSafe() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_MakeSafe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeSafe(::grpc::ServerContext* context, ::platformcomms::MakeSafeRequest* request, ::grpc::ServerAsyncResponseWriter< ::platformcomms::PlatformState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::platformcomms::StateRequest* request, ::grpc::ServerAsyncResponseWriter< ::platformcomms::PlatformState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Initialize<WithAsyncMethod_GoToTarget<WithAsyncMethod_GoToHeight<WithAsyncMethod_Stabilize<WithAsyncMethod_MakeSafe<WithAsyncMethod_GetState<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Initialize() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::platformcomms::InitializationRequest, ::platformcomms::PlatformState>(
          [this](::grpc::ServerContext* context,
                 const ::platformcomms::InitializationRequest* request,
                 ::platformcomms::PlatformState* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Initialize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GoToTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GoToTarget() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::platformcomms::TargetRequest, ::platformcomms::PlatformState>(
          [this] { return this->GoToTarget(); }));
    }
    ~ExperimentalWithCallbackMethod_GoToTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::platformcomms::TargetRequest, ::platformcomms::PlatformState>* GoToTarget() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::platformcomms::TargetRequest, ::platformcomms::PlatformState>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GoToHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GoToHeight() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::platformcomms::HeightRequest, ::platformcomms::PlatformState>(
          [this](::grpc::ServerContext* context,
                 const ::platformcomms::HeightRequest* request,
                 ::platformcomms::PlatformState* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GoToHeight(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GoToHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stabilize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stabilize() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::platformcomms::StabilityRequest, ::platformcomms::PlatformState>(
          [this](::grpc::ServerContext* context,
                 const ::platformcomms::StabilityRequest* request,
                 ::platformcomms::PlatformState* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stabilize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Stabilize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MakeSafe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_MakeSafe() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::platformcomms::MakeSafeRequest, ::platformcomms::PlatformState>(
          [this](::grpc::ServerContext* context,
                 const ::platformcomms::MakeSafeRequest* request,
                 ::platformcomms::PlatformState* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->MakeSafe(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_MakeSafe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetState() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::platformcomms::StateRequest, ::platformcomms::PlatformState>(
          [this](::grpc::ServerContext* context,
                 const ::platformcomms::StateRequest* request,
                 ::platformcomms::PlatformState* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Initialize<ExperimentalWithCallbackMethod_GoToTarget<ExperimentalWithCallbackMethod_GoToHeight<ExperimentalWithCallbackMethod_Stabilize<ExperimentalWithCallbackMethod_MakeSafe<ExperimentalWithCallbackMethod_GetState<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Initialize() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GoToTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GoToTarget() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GoToTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GoToHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GoToHeight() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GoToHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stabilize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stabilize() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Stabilize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MakeSafe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MakeSafe() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_MakeSafe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Initialize() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GoToTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GoToTarget() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GoToTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoToTarget(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GoToHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GoToHeight() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GoToHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoToHeight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stabilize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stabilize() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Stabilize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStabilize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MakeSafe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_MakeSafe() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_MakeSafe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeSafe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetState() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Initialize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Initialize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Initialize(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GoToTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GoToTarget() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GoToTarget(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GoToTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GoToTarget() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GoToHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GoToHeight() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GoToHeight(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GoToHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GoToHeight(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stabilize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stabilize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stabilize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stabilize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stabilize(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MakeSafe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_MakeSafe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->MakeSafe(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_MakeSafe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void MakeSafe(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Initialize() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::platformcomms::InitializationRequest, ::platformcomms::PlatformState>(std::bind(&WithStreamedUnaryMethod_Initialize<BaseClass>::StreamedInitialize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* context, const ::platformcomms::InitializationRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::platformcomms::InitializationRequest,::platformcomms::PlatformState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GoToHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GoToHeight() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::platformcomms::HeightRequest, ::platformcomms::PlatformState>(std::bind(&WithStreamedUnaryMethod_GoToHeight<BaseClass>::StreamedGoToHeight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GoToHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GoToHeight(::grpc::ServerContext* context, const ::platformcomms::HeightRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGoToHeight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::platformcomms::HeightRequest,::platformcomms::PlatformState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stabilize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stabilize() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::platformcomms::StabilityRequest, ::platformcomms::PlatformState>(std::bind(&WithStreamedUnaryMethod_Stabilize<BaseClass>::StreamedStabilize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stabilize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stabilize(::grpc::ServerContext* context, const ::platformcomms::StabilityRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStabilize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::platformcomms::StabilityRequest,::platformcomms::PlatformState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeSafe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MakeSafe() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::platformcomms::MakeSafeRequest, ::platformcomms::PlatformState>(std::bind(&WithStreamedUnaryMethod_MakeSafe<BaseClass>::StreamedMakeSafe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MakeSafe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeSafe(::grpc::ServerContext* context, const ::platformcomms::MakeSafeRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeSafe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::platformcomms::MakeSafeRequest,::platformcomms::PlatformState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::platformcomms::StateRequest, ::platformcomms::PlatformState>(std::bind(&WithStreamedUnaryMethod_GetState<BaseClass>::StreamedGetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::platformcomms::StateRequest* request, ::platformcomms::PlatformState* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::platformcomms::StateRequest,::platformcomms::PlatformState>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_GoToHeight<WithStreamedUnaryMethod_Stabilize<WithStreamedUnaryMethod_MakeSafe<WithStreamedUnaryMethod_GetState<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GoToTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GoToTarget() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::platformcomms::TargetRequest, ::platformcomms::PlatformState>(std::bind(&WithSplitStreamingMethod_GoToTarget<BaseClass>::StreamedGoToTarget, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GoToTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GoToTarget(::grpc::ServerContext* context, const ::platformcomms::TargetRequest* request, ::grpc::ServerWriter< ::platformcomms::PlatformState>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGoToTarget(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::platformcomms::TargetRequest,::platformcomms::PlatformState>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GoToTarget<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Initialize<WithSplitStreamingMethod_GoToTarget<WithStreamedUnaryMethod_GoToHeight<WithStreamedUnaryMethod_Stabilize<WithStreamedUnaryMethod_MakeSafe<WithStreamedUnaryMethod_GetState<Service > > > > > > StreamedService;
};

}  // namespace platformcomms


#endif  // GRPC_platformCommunications_2eproto__INCLUDED
